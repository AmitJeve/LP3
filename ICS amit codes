-------------------------------Diffie Hellman-----------------------------------
p = 27
g = 13

print(f'The value of p is: {p}')
print(f'The value of g is: {g}')

a = 7
print(f'The Private key for a is: {a}')
x = int(pow(g,a,p))

b = 2
print(f'The Private key for b is: {b}')
y = int(pow(g,b,p))

ka = int(pow(y,a,p))
kb = int(pow(x,b,p))

print(f'Secret key for a is: {ka}')
print(f'Secret key for b is: {kb}')

"""output: The value of p is: 27
The value of g is: 13
The Private key for a is: 7
The Private key for b is: 2
Secret key for a is: 16
Secret key for b is: 16"""

--------------------------------------------------------------------------------

--------------------------------------------------------------AES---------------------------------------------------------------------
!pip install PyCryptodome

from Crypto.Cipher import AES
from secrets import token_bytes
############################
key = token_bytes(16)
############################
def encrypt(msg):
     """In cryptography, a nonce ( number once) is an arbitrary number that 
    can be used just once in a cryptographic communicationIn cryptography, a message authentication code (MAC), 
    sometimes known as a tag, is a short piece of information used to authenticate a message
    """
    cipher = AES.new(key,AES.MODE_EAX)
    nonce = cipher.nonce
    ciphertext,tag = cipher.encrypt_and_digest(msg.encode('ascii'))
    return nonce,ciphertext,tag

############################
def decrypt(nonce,ciphertext,tag):
    cipher = AES.new(key,AES.MODE_EAX,nonce = nonce)
    plaintext = cipher.decrypt(ciphertext)
    
    try:
        cipher.verify(tag)
        return plaintext.decode('ascii')
    except:
        return False

############################
nonce,ciphertext,tag = encrypt(input("Enter a message: "))
plaintext = decrypt(nonce,ciphertext,tag)

print(f'Cipher text: {ciphertext}')

if not plaintext:
    print('Message is corrupted!!!')
else:
    print(f'Plain text: {plaintext}')
############################

"""Output:
Enter a message: AES Implementation using PyCryptodome
Cipher text: b'\xda\xd9b\xe3\xa6\xb7tu\x01{7\x82\x18[\r\x80F\xe9S\xfa\xae<\xf1\xebg\xc1\xf5!=\x9d\x938\xb0\xb2\x0cs\x01'
Plain text: AES Implementation using PyCryptodome"""



-----------------------------------DES------------------------------------------------------------------------------------------
from Crypto.Cipher import DES
from secrets import token_bytes
#############################

key = token_bytes(8)
#############################
def encrypt(msg):
    """In cryptography, a nonce ( number once) is an arbitrary number that 
    can be used just once in a cryptographic communicationIn cryptography, a message authentication code (MAC), 
    sometimes known as a tag, is a short piece of information used to authenticate a message
    """
    cipher = DES.new(key,DES.MODE_EAX)
    nonce = cipher.nonce
    ciphertext,tag = cipher.encrypt_and_digest(msg.encode('ascii'))
    return nonce,ciphertext,tag
#############################
def decrypt(nonce,ciphertext,tag):
    cipher = DES.new(key,DES.MODE_EAX,nonce=nonce)
    plaintext = cipher.decrypt(ciphertext)
    
    try:
        cipher.verify(tag)
        return plaintext.decode('ascii')
    except:
        return False


#############################
nonce,ciphertext,tag = encrypt(input("Enter a message: "))
plaintext = decrypt(nonce,ciphertext,tag)

print(f'Cipher text: {ciphertext}')

if not plaintext:
    print("Message is corrupted!!!")
else:
    print(f'Plain text: {plaintext}')

#############################
"""Output:
Enter a message: Hello this is Amit
Cipher text: b'Qb%\x94v\xc7M\x06q\x91\xd7?\xd9\x88\xfa2\x85,bn\xaf\xcd\xc0\x94\xcd\xd0\x93_\x08'
Plain text: Hello this is Amit"""




-----------------------------------------------------RSA-----------------------------------------------------------------------
# from decimal import Decimal


# def gcd(k, totient):
#     while totient != 0:
#         c = k % totient
#         k = totient
#         totient = c
#     return k


# d = 0
# p = int(input())
# q = int(input())
# message = int(input())
# # calculate n
# n = p*q
# # calculate totient
# totient = (p-1)*(q-1)

# # calculate K
# for k in range(2, totient):
#     if gcd(k, totient) == 1:
#         break

# for i in range(1, 10):
#     x = 1 + i*totient
#     if x % k == 0:
#         d = int(x/k)
#         break
# local_cipher = Decimal(0)
# local_cipher = pow(message, k)
# cipher_text = local_cipher % n

# decrypt_t = Decimal(0)
# decrypt_t = pow(cipher_text, d)
# decrpyted_text = decrypt_t % n

# print('n='+str(n))
# print('k= '+str(k))
# print('totient= '+str(totient))
# print('d= '+str(d))
# print('cipher text= '+str(cipher_text))
# print('decrypted text= '+str(decrpyted_text))



#################################

import random
import string


def get_N(p, q):
    return p*q

def phi_of_n(p, q):
    return (p - 1) * (q - 1)

def get_gcd(x, y):
    while(y):
        x, y = y, x % y
    return x

# Generate Public and private keys

def get_encryption_key(n, phi_of_n):
    lst = [i for i in range(1, n+1)]
    e_list = []
    for i in lst:
        if (1 < i) and (i < phi_of_n):
            gcd = get_gcd(i, n)
            gcd_phi = get_gcd(i, phi_of_n)
            if (gcd == 1) and (gcd_phi == 1):
                e_list.append(i)
    if len(e_list) == 1:
        return e_list[0]
    else:
        return e_list[random.randint(1, len(e_list)-1)]  


def get_decryption_key(e, phi_of_n):
    d_list = []
    for i in range(e * 25):
        if (e * i) % phi_of_n == 1:
            d_list.append(i)
    return d_list[random.randint(1, len(d_list) - 1)]


p = 11
q = 29
n = get_N(p, q)  # 319
phi_func = phi_of_n(p, q)  # 280
e = get_encryption_key(n, phi_func)
d = get_decryption_key(e, phi_func)
# to avoid key collision
while d == e:
    d = get_decryption_key(e, phi_func)

public_key = [e, n]  # [137, 319]
private_key = [d, n]  # [1633, 319]

# Encryption
def text_to_digits(PT):
    pool = string.ascii_letters + string.punctuation + " "
    M = []
    for i in PT:
        M.append(pool.index(i))
    return M

def digits_to_text(DT):
    pool = string.ascii_letters + string.punctuation + " "
    msg = ''
    for i in DT:
        # print(i)
        msg += pool[i]
    return msg
    
def encrypt(M, public_key):
    return [(i ** public_key[0]) % public_key[1] for i in M]

message = "hello amit!"
M = text_to_digits(message)
CT = encrypt(M, public_key)
print("Cipher text: ",CT)

# Decryption
def decrypt(CT, private_key):
    return [((i ** private_key[0]) % private_key[1]) for i in CT]

DT = decrypt(CT, private_key) 
m = digits_to_text(DT)
print("Decrypted text: ", m)


--------------------------------------------------------------------------------------------------------------------------------
